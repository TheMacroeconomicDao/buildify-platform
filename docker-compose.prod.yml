version: '3.8'

services:
  # Backend Application (Production)
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.prod
    container_name: buildify-backend-prod
    ports:
      - "80:80"
      - "443:443"
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
    env_file:
      - ./apps/backend/.env.production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - backend-storage:/var/www/html/storage
      - backend-logs:/var/www/html/storage/logs
      - ssl-certs:/etc/letsencrypt
    networks:
      - buildify-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: buildify-postgres-prod
    environment:
      - POSTGRES_DB=${DB_DATABASE}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - buildify-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Redis (Production)
  redis:
    image: redis:7-alpine
    container_name: buildify-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - buildify-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Soketi WebSocket Server (Production)
  soketi:
    image: quay.io/soketi/soketi:latest-16-alpine
    container_name: buildify-soketi-prod
    ports:
      - "6001:6001"
    environment:
      - SOKETI_DEBUG=0
      - SOKETI_DEFAULT_APP_ID=${PUSHER_APP_ID}
      - SOKETI_DEFAULT_APP_KEY=${PUSHER_APP_KEY}
      - SOKETI_DEFAULT_APP_SECRET=${PUSHER_APP_SECRET}
      - SOKETI_USER_AUTHENTICATION_TIMEOUT=30000
    networks:
      - buildify-network
    restart: always

  # Queue Workers (Production - Multiple instances)
  queue-default:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.prod
    container_name: buildify-queue-default
    command: php artisan queue:work redis --queue=default --sleep=3 --tries=3 --max-time=3600
    environment:
      - APP_ENV=production
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - QUEUE_CONNECTION=redis
    env_file:
      - ./apps/backend/.env.production
    depends_on:
      - postgres
      - redis
    volumes:
      - backend-logs:/var/www/html/storage/logs
    networks:
      - buildify-network
    restart: always
    deploy:
      replicas: 2

  queue-high-priority:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.prod
    container_name: buildify-queue-high
    command: php artisan queue:work redis --queue=high-priority --sleep=1 --tries=5
    environment:
      - APP_ENV=production
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - QUEUE_CONNECTION=redis
    env_file:
      - ./apps/backend/.env.production
    depends_on:
      - postgres
      - redis
    volumes:
      - backend-logs:/var/www/html/storage/logs
    networks:
      - buildify-network
    restart: always

  # Scheduler (Laravel Cron)
  scheduler:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.prod
    container_name: buildify-scheduler-prod
    command: php artisan schedule:work
    environment:
      - APP_ENV=production
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - REDIS_HOST=redis
    env_file:
      - ./apps/backend/.env.production
    depends_on:
      - postgres
      - redis
    volumes:
      - backend-logs:/var/www/html/storage/logs
    networks:
      - buildify-network
    restart: always

  # Nginx (Reverse Proxy - Production)
  nginx:
    image: nginx:alpine
    container_name: buildify-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/conf.d:ro
      - ssl-certs:/etc/letsencrypt:ro
      - backend-storage:/var/www/html/storage:ro
    depends_on:
      - backend
    networks:
      - buildify-network
    restart: always

networks:
  buildify-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  backend-storage:
    driver: local
  backend-logs:
    driver: local
  ssl-certs:
    driver: local
