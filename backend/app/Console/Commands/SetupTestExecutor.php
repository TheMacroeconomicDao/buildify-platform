<?php

namespace App\Console\Commands;

use App\Enums\Users\Type;
use App\Models\User;
use App\Models\UserWork;
use Illuminate\Console\Command;

class SetupTestExecutor extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'setup:test-executor';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        $executor = User::where('email', 'executor@test.com')
            ->where('type', Type::Executor->value)
            ->first();

        if (!$executor) {
            $this->error('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: php artisan create:test-users');
            return;
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        UserWork::where('user_id', $executor->id)->delete();

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç
        $workCategories = [
            ['direction' => 'repair', 'type' => 'repair'], // –û–±—â–∏–π —Ä–µ–º–æ–Ω—Ç
            ['direction' => 'repair', 'type' => 'full_repair'], // –†–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á
            ['direction' => 'construction', 'type' => 'construction'], // –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
            ['direction' => 'plumbing', 'type' => 'plumbing'], // –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞
            ['direction' => 'electrical', 'type' => 'electrical'], // –≠–ª–µ–∫—Ç—Ä–∏–∫–∞
        ];

        foreach ($workCategories as $category) {
            UserWork::create([
                'user_id' => $executor->id,
                'direction' => $category['direction'],
                'type' => $category['type'],
            ]);
        }

        $this->info('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é:');
        $this->info('');
        $this->info('üî® –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨: ' . $executor->name);
        $this->info('üìß Email: ' . $executor->email);
        $this->info('');
        $this->info('üèóÔ∏è –ö–ê–¢–ï–ì–û–†–ò–ò –†–ê–ë–û–¢:');
        foreach ($workCategories as $category) {
            $this->info('- ' . $category['direction'] . ' / ' . $category['type']);
        }
        $this->info('');
        $this->info('‚úÖ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –∑–∞–∫–∞–∑—ã —ç—Ç–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π!');
    }
}
