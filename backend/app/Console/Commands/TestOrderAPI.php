<?php

namespace App\Console\Commands;

use App\Models\Order;
use App\Models\User;
use Illuminate\Console\Command;

class TestOrderAPI extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'test:order-api {orderId?}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $orderId = $this->argument('orderId') ?? 2; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–∫–∞–∑ #2
        
        $order = Order::with('files')->find($orderId);
        if (!$order) {
            $this->error("‚ùå –ó–∞–∫–∞–∑ —Å ID {$orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        $this->info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –∑–∞–∫–∞–∑–∞ #{$orderId}");
        $this->info('');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        $this->info("üìã –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:");
        $this->info("   –ù–∞–∑–≤–∞–Ω–∏–µ: {$order->title}");
        $this->info("   –°—Ç–æ–∏–º–æ—Å—Ç—å: ${$order->max_amount}");
        $this->info("   –°—Ç–∞—Ç—É—Å: {$order->status}");
        $this->info("   –ê–≤—Ç–æ—Ä ID: {$order->author_id}");
        $this->info('');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        $files = $order->files;
        $this->info("üìé –§–∞–π–ª—ã –∑–∞–∫–∞–∑–∞:");
        $this->info("   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: " . $files->count());
        
        if ($files->count() > 0) {
            foreach ($files as $file) {
                $this->info("   - ID: {$file->id} | {$file->name} | –†–∞–∑–º–µ—Ä: {$file->size} –±–∞–π—Ç");
                $this->info("     –ü—É—Ç—å: {$file->path}");
                $this->info("     URL: {$file->url}");
            }
        } else {
            $this->warn("   ‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –∫–æ–º–∞–Ω–¥–æ–π:");
            $this->warn("      php artisan add:test-order-attachments {$orderId}");
            $this->warn("      php artisan create:test-svg-images {$orderId}");
        }
        
        $this->info('');

        // –°–∏–º—É–ª—è—Ü–∏—è API –æ—Ç–≤–µ—Ç–∞
        $apiData = $order->toArray();
        $apiData['files'] = $files->toArray();
        
        $this->info("üåê –°—Ç—Ä—É–∫—Ç—É—Ä–∞ API –æ—Ç–≤–µ—Ç–∞:");
        $this->info("   –ö–ª—é—á 'files' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: " . (isset($apiData['files']) ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'));
        $this->info("   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ API: " . count($apiData['files']));
        
        if (count($apiData['files']) > 0) {
            $this->info("   –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:");
            $firstFile = $apiData['files'][0];
            foreach (['id', 'name', 'path', 'size', 'url'] as $key) {
                $value = $firstFile[$key] ?? 'null';
                $this->info("     {$key}: {$value}");
            }
        }

        $this->info('');
        $this->info("‚úÖ –¢–µ—Å—Ç API –∑–∞–≤–µ—Ä—à–µ–Ω!");
        $this->info("üì± –í –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ —Ñ–∞–π–ª—ã");
    }
}
