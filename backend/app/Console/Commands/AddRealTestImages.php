<?php

namespace App\Console\Commands;

use App\Models\File;
use App\Models\Order;
use App\Models\OrderAttachment;
use App\Models\User;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Storage;

class AddRealTestImages extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'add:real-test-images {orderId?}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $orderId = $this->argument('orderId');
        
        // –ï—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
        if (!$orderId) {
            $order = Order::latest()->first();
            if (!$order) {
                $this->error('‚ùå –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π: php artisan create:test-order');
                return;
            }
            $orderId = $order->id;
        } else {
            $order = Order::find($orderId);
            if (!$order) {
                $this->error("‚ùå –ó–∞–∫–∞–∑ —Å ID {$orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }
        }

        // –ù–∞—Ö–æ–¥–∏–º –∞–≤—Ç–æ—Ä–∞ –∑–∞–∫–∞–∑–∞
        $customer = User::find($order->author_id);
        if (!$customer) {
            $this->error('‚ùå –ê–≤—Ç–æ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        $this->info("üñºÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #{$orderId}");

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        $imagesDir = 'attachments/images';
        Storage::disk('public')->makeDirectory($imagesDir);

        // URLs –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        $testImages = [
            [
                'url' => 'https://picsum.photos/800/600?random=1',
                'name' => '–ø–ª–∞–Ω_–∫–≤–∞—Ä—Ç–∏—Ä—ã.jpg'
            ],
            [
                'url' => 'https://picsum.photos/800/600?random=2', 
                'name' => '—Å–æ—Å—Ç–æ—è–Ω–∏–µ_–ø–æ–º–µ—â–µ–Ω–∏—è.jpg'
            ],
            [
                'url' => 'https://picsum.photos/800/600?random=3',
                'name' => '—Å—Ö–µ–º–∞_—ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∏.png'
            ],
            [
                'url' => 'https://picsum.photos/800/600?random=4',
                'name' => '–∑–∞–º–µ—Ä—ã_–ø–æ–º–µ—â–µ–Ω–∏—è.jpg'
            ]
        ];

        $createdFiles = [];

        foreach ($testImages as $image) {
            try {
                // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                $imageContent = file_get_contents($image['url']);
                
                if ($imageContent === false) {
                    $this->warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {$image['name']}");
                    continue;
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                $filePath = $imagesDir . '/' . $image['name'];
                Storage::disk('public')->put($filePath, $imageContent);

                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                $file = File::create([
                    'user_id' => $customer->id,
                    'path' => $filePath,
                    'name' => $image['name'],
                    'size' => strlen($imageContent)
                ]);

                // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª –∫ –∑–∞–∫–∞–∑—É
                OrderAttachment::create([
                    'order_id' => $order->id,
                    'file_id' => $file->id
                ]);

                $createdFiles[] = $file;
                $this->info("‚úÖ –°–∫–∞—á–∞–Ω–æ –∏ —Å–æ–∑–¥–∞–Ω–æ: {$image['name']} (ID: {$file->id})");

            } catch (\Exception $e) {
                $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {$image['name']}: " . $e->getMessage());
            }
        }

        if (count($createdFiles) > 0) {
            $this->info('');
            $this->info("‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∑–∞–∫–∞–∑—É #{$orderId}:");
            $this->info("üìÅ –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: " . count($createdFiles));
            $this->info("üìã –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {$order->title}");
            $this->info("üë§ –ê–≤—Ç–æ—Ä: {$customer->name}");
            $this->info('');
            $this->info('üì± –¢–µ–ø–µ—Ä—å –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!');
            $this->info('üîó –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–∞–º:');
            
            foreach ($createdFiles as $file) {
                $this->info("   - {$file->name}: " . Storage::disk('public')->url($file->path));
            }
        } else {
            $this->error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }
    }
}
