<?php

namespace App\Console\Commands;

use App\Models\Order;
use App\Models\User;
use Illuminate\Console\Command;

class ShowTestAccounts extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'show:test-accounts';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üß™ –¢–ï–°–¢–û–í–´–ï –ê–ö–ö–ê–£–ù–¢–´ BUILDLIFY');
        $this->info('=' . str_repeat('=', 50));
        $this->info('');

        // –ê–¥–º–∏–Ω
        $admin = User::where('email', 'admin@test.com')->first();
        if ($admin) {
            $this->info('üë®‚Äçüíº –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†:');
            $this->info('üìß Email: admin@test.com');
            $this->info('üîë Password: Admin123!');
            $this->info('üîó –ê–¥–º–∏–Ω–∫–∞: /admin');
            $this->info('');
        }

        // –ó–∞–∫–∞–∑—á–∏–∫
        $customer = User::where('email', 'customer@test.com')->first();
        if ($customer) {
            $this->info('üìß –ó–ê–ö–ê–ó–ß–ò–ö:');
            $this->info('üìß Email: customer@test.com');
            $this->info('üîë Password: Test123!');
            $this->info('üë§ –ò–º—è: ' . $customer->name);
            $this->info('üì± –¢–µ–ª–µ—Ñ–æ–Ω: ' . $customer->phone);
            $this->info('');
        }

        // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        $executor = User::where('email', 'executor@test.com')->first();
        if ($executor) {
            $this->info('üî® –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨:');
            $this->info('üìß Email: executor@test.com');
            $this->info('üîë Password: Test123!');
            $this->info('üë§ –ò–º—è: ' . $executor->name);
            $this->info('üì± –¢–µ–ª–µ—Ñ–æ–Ω: ' . $executor->phone);
            $this->info('‚úÖ –°—Ç–∞—Ç—É—Å: –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            $this->info('‚≠ê –†–µ–π—Ç–∏–Ω–≥: ' . $executor->average_rating . ' (' . $executor->reviews_count . ' –æ—Ç–∑—ã–≤–æ–≤)');
            $this->info('üõ†Ô∏è –û–ø—ã—Ç: ' . $executor->work_experience . ' –ª–µ—Ç');
            $this->info('');
        }

        // –ó–∞–∫–∞–∑—ã
        $orders = Order::with('author')->get();
        if ($orders->count() > 0) {
            $this->info('üè† –¢–ï–°–¢–û–í–´–ï –ó–ê–ö–ê–ó–´:');
            foreach ($orders as $order) {
                $this->info('ID: ' . $order->id . ' | ' . $order->title);
                $this->info('üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~$' . number_format($order->max_amount, 0, '.', ' '));
                $this->info('üìç –ê–¥—Ä–µ—Å: ' . $order->address);
                $this->info('üë§ –ê–≤—Ç–æ—Ä: ' . $order->author->name);
                $this->info('üìä –°—Ç–∞—Ç—É—Å: ' . $this->getStatusName($order->status));
                $this->info('');
            }
        }

        $this->info('üì± –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ:');
        $this->info('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        $this->info('2. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (executor@test.com)');
        $this->info('3. –ù–∞–π–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤"');
        $this->info('4. –û—Ç–∫–ª–∏–∫–Ω–∏—Ç–µ—Å—å –Ω–∞ –∑–∞–∫–∞–∑');
        $this->info('5. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∑–∞–∫–∞–∑—á–∏–∫ (customer@test.com)');
        $this->info('6. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫–ª–∏–∫–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
        $this->info('7. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —Ñ–ª–æ—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
        $this->info('');
        $this->info('üîó –ê–¥–º–∏–Ω–∫–∞: http://your-domain/admin (admin@test.com / Admin123!)');
    }

    private function getStatusName($status)
    {
        return match($status) {
            0 => '–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è',
            1 => '–í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è',
            2 => '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω',
            3 => '–í —Ä–∞–±–æ—Ç–µ',
            4 => '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            5 => '–ó–∞–≤–µ—Ä—à–µ–Ω',
            6 => '–û—Ç–º–µ–Ω–µ–Ω',
            7 => '–û—Ç–∫–ª–æ–Ω–µ–Ω',
            default => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
        };
    }
}
