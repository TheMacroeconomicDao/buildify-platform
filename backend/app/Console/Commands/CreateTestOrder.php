<?php

namespace App\Console\Commands;

use App\Enums\Order\Status;
use App\Enums\Users\Type;
use App\Models\Order;
use App\Models\User;
use Illuminate\Console\Command;

class CreateTestOrder extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'create:test-order';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞
        $customer = User::where('email', 'customer@test.com')
            ->where('type', Type::Customer->value)
            ->first();

        if (!$customer) {
            $this->error('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: php artisan create:test-users');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
        $order = Order::create([
            'title' => '–†–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á',
            'work_direction' => 'repair',
            'work_type' => 'full_repair',
            'description' => '–ù–µ–æ–±—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ–¥ –∫–ª—é—á. –í–∫–ª—é—á–∞–µ—Ç –¥–µ–º–æ–Ω—Ç–∞–∂ —Å—Ç–∞—Ä—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å—Ç–µ–Ω, —É–∫–ª–∞–¥–∫—É –ø–ª–∏—Ç–∫–∏, –ø–æ–∫—Ä–∞—Å–∫—É, —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏ –∏ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏.',
            'city' => '–î—É–±–∞–π',
            'address' => '–®–∞—Ä–∏–∫–æ–ª–ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 17',
            'full_address' => '–®–∞—Ä–∏–∫–æ–ª–ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 17, –î—É–±–∞–π, –û–ê–≠',
            'latitude' => 25.2048,
            'longitude' => 55.2708,
            'housing_type' => 'apartment',
            'housing_condition' => 'new',
            'housing_preparation_level' => 'without_walls',
            'bathroom_type' => 'separate',
            'ceiling_height' => 2.5,
            'total_area' => 450.5,
            'date_type' => 'period',
            'start_date' => '2024-08-18',
            'start_time' => '15:00',
            'end_date' => '2024-08-28',
            'end_time' => '12:00',
            'work_date' => '2024-08-18',
            'max_amount' => 1220000,
            'author_id' => $customer->id,
            'status' => Status::SearchExecutor->value,
        ]);

        $this->info('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:');
        $this->info('');
        $this->info('üè† –ó–ê–ö–ê–ó #' . $order->id);
        $this->info('–ù–∞–∑–≤–∞–Ω–∏–µ: ' . $order->title);
        $this->info('–°—Ç–æ–∏–º–æ—Å—Ç—å: ~$' . number_format($order->max_amount, 0, '.', ' '));
        $this->info('–ê–¥—Ä–µ—Å: ' . $order->address);
        $this->info('–ü–ª–æ—â–∞–¥—å: ' . $order->total_area . ' –∫–≤.–º.');
        $this->info('–°—Ç–∞—Ç—É—Å: –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
        $this->info('–ê–≤—Ç–æ—Ä: ' . $customer->name . ' (' . $customer->email . ')');
        $this->info('');
        $this->info('üì± –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ:');
        $this->info('1. –í–æ–π—Ç–∏ –≤ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (executor@test.com)');
        $this->info('2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤"');
        $this->info('3. –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –∑–∞–∫–∞–∑');
        $this->info('4. –í–æ–π—Ç–∏ –∫–∞–∫ –∑–∞–∫–∞–∑—á–∏–∫ (customer@test.com) –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏');
    }
}
