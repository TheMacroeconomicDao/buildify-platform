import React, {useState, useEffect, useCallback} from 'react';
import {Alert, Animated, Platform, PermissionsAndroid} from 'react-native';
import {notifyError, notifySuccess, showConfirm} from '../services/notify';
import {useTranslation} from 'react-i18next';
import {useFocusEffect} from '@react-navigation/native';
import {apiService, retryApiCall, api} from '../services/index';
import {useSelector} from 'react-redux';
import styles from '../styles';
import config from '../config';
import FileViewer from 'react-native-file-viewer';
import RNFS from 'react-native-fs';
import {CameraRoll} from '@react-native-camera-roll/camera-roll';

const useOrder = (navigation, orderId) => {
  const {t} = useTranslation();
  const auth = useSelector(state => state.auth);
  const userType = auth?.userData?.type || 0; // 0=executor, 1=customer, 2=mediator

  const [orderData, setOrderData] = useState(null);
  const [activeTab, setActiveTab] = useState('details');
  const [loading, setLoading] = useState(true);
  const [menuVisible, setMenuVisible] = useState(false);
  const [menuAnimation] = useState(new Animated.Value(0));
  const [reviewModalVisible, setReviewModalVisible] = useState(false);
  const [executorReviewModalVisible, setExecutorReviewModalVisible] =
    useState(false);
  const [rating, setRating] = useState(0);
  const [reviewText, setReviewText] = useState('');
  const [executorDetails, setExecutorDetails] = useState({});
  const [canReviewExecutor, setCanReviewExecutor] = useState(false);

  const orderStatuses = {
    0: t('Searching for performer'), // –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    1: t('Cancelled'), // –û—Ç–º–µ–Ω—ë–Ω
    2: t('Selecting executor'), // –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    3: t('Executor selected'), // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω
    4: t('In work'), // –í —Ä–∞–±–æ—Ç–µ
    5: t('Awaiting confirmation'), // –ñ–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    6: t('Rejected'), // –û—Ç–∫–ª–æ–Ω—ë–Ω
    7: t('Closed'), // –ó–∞–∫—Ä—ã—Ç
    8: t('Completed'), // –ó–∞–≤–µ—Ä—à—ë–Ω
    // –°—Ç–∞—Ç—É—Å—ã –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞
    10: t('Mediator: Clarifying details'), // –≠—Ç–∞–ø —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
    11: t('Mediator: Executor search'), // –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    12: t('Mediator: Project execution'), // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    13: t('Mediator: Archived'), // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω
  };

  const getStatusColor = status => {
    switch (status) {
      case 0:
        return '#333333'; // —á–µ—Ä–Ω—ã–π
      case 1:
        return styles.colors.red; // –∫—Ä–∞—Å–Ω—ã–π
      case 2:
        return '#333333'; // —á–µ—Ä–Ω—ã–π
      case 3:
        return styles.colors.yellow; // –∂–µ–ª—Ç—ã–π
      case 4:
        return styles.colors.green; // –∑–µ–ª–µ–Ω—ã–π
      case 5:
        return styles.colors.green; // –∑–µ–ª–µ–Ω—ã–π
      case 6:
        return styles.colors.red; // –∫—Ä–∞—Å–Ω—ã–π
      case 7:
        return '#333333'; // —á–µ—Ä–Ω—ã–π
      case 8:
        return styles.colors.green; // –∑–µ–ª–µ–Ω—ã–π - –∑–∞–≤–µ—Ä—à–µ–Ω
      // –¶–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞
      case 10:
        return '#55A3FF'; // –≥–æ–ª—É–±–æ–π - —à–∞–≥ 1
      case 11:
        return '#FD79A8'; // —Ä–æ–∑–æ–≤—ã–π - —à–∞–≥ 2
      case 12:
        return '#FDCB6E'; // –∂–µ–ª—Ç—ã–π - —à–∞–≥ 3
      case 13:
        return '#636E72'; // —Å–µ—Ä—ã–π - –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω
      default:
        return styles.colors.gray;
    }
  };

  const fetchExecutorDetails = useCallback(
    async executorId => {
      try {
        if (executorDetails[executorId]) {
          return executorDetails[executorId];
        }

        const response = await retryApiCall(() =>
          api.executors.executorsDetail(executorId),
        );

        if (response.success && response.result) {
          setExecutorDetails(prev => ({
            ...prev,
            [executorId]: response.result,
          }));
          return response.result;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
      }
      return null;
    },
    [executorDetails],
  );

  const enrichExecutorData = useCallback(
    async performer => {
      if (performer?.id) {
        const details = await fetchExecutorDetails(performer.id);
        if (details) {
          return {...performer, ...details};
        }
      }
      return performer;
    },
    [fetchExecutorDetails],
  );

  const fetchOrderData = async id => {
    try {
      setLoading(true);
      // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ (GET /orders/{id})
      const orderResponse = await retryApiCall(() =>
        api.orders.ordersDetail(id),
      );

      if (!orderResponse.success) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞');
      }

      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
      const order = orderResponse.result;

      // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑ —Å —Å–µ—Ä–≤–µ—Ä–∞ (GET /orders/{id}/responses) - —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞
      if (
        userType === 1 ||
        userType === '1' ||
        userType === 2 ||
        userType === '2'
      ) {
        // –¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫–∏ –∏ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏
        try {
          const responsesResponse = await retryApiCall(() =>
            api.orders.responsesGetAll(id),
          );

          if (responsesResponse && responsesResponse.success) {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–∏–∫–∏ –∫ –¥–∞–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞
            order.responses = responsesResponse.result || [];
          } else {
            order.responses = [];
          }
        } catch (error) {
          // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç–∫–ª–∏–∫–∞–º (403 –æ—à–∏–±–∫–∞), –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
          if (error.response?.status === 403 || error.status === 403) {
            console.log(
              'No access to order responses - user is not the author',
            );
          } else {
            console.warn('Failed to load order responses:', error.message);
          }
          order.responses = [];
        }
      } else {
        // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –≤–∏–¥–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –¥—Ä—É–≥–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        console.log('Executor user - skipping responses loading');
        order.responses = [];
      }

      // ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º executor_id –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      if (order.executor_id) {
        try {
          const executorData = await fetchExecutorDetails(order.executor_id);
          if (executorData) {
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç selectedPerformer –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            const avatarUrl =
              executorData.avatar || executorData.user?.avatar || '';
            order.selectedPerformer = {
              id: order.executor_id,
              name:
                executorData.name ||
                executorData.user?.name ||
                'Unknown performer',
              avatar: avatarUrl
                ? avatarUrl.startsWith('http')
                  ? avatarUrl
                  : config.siteUrl + avatarUrl
                : '',
              orders: executorData.orders_count || 0,
              rating: executorData.average_rating || executorData.rating || 0,
              reviews: executorData.reviews_count || 0,
              ...executorData,
            };
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
        }
      }

      return order;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞:', error);
      notifyError(
        t('Error'),
        t('Failed to load order data. Please try again later.'),
      );
      return null;
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
  const loadOrder = async () => {
    const order = await fetchOrderData(orderId);
    if (order) {
      setOrderData(order);
    } else {
      navigation.goBack();
    }
  };

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const refreshOrderData = async () => {
    try {
      console.log('üîÑ Refreshing order data for orderId:', orderId);
      const data = await fetchOrderData(orderId);
      if (data) {
        console.log('üìä New order data received:', {
          id: data.id,
          status: data.status,
          executor_id: data.executor_id,
          selectedPerformer: data.selectedPerformer?.id,
          responsesCount: data.responses?.length,
        });
        setOrderData(data);
        console.log('‚úÖ Order data updated in state');
      } else {
        console.log('‚ùå No data received from fetchOrderData');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:', error);
    }
  };

  const sendContacts = async responseId => {
    try {
      // ‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (POST /orders/{id}/responses/{responseId}/send-contact) - —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫
      const response = await retryApiCall(() =>
        api.orders.responsesSendContact(orderData.id, responseId),
      );

      if (response.success) {
        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await refreshOrderData();
        notifySuccess(t('Success'), t('Contacts sent successfully'));
        return {success: true};
      } else {
        throw new Error(response.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
      notifyError(
        t('Error'),
        error.message || t('Failed to send contacts. Please try again later.'),
      );
      return {success: false};
    }
  };

  const choosePerformer = async responseId => {
    try {
      // ‚úÖ –í—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (POST /orders/{id}/responses/{responseId}/select) - —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫
      const response = await retryApiCall(() =>
        api.orders.responsesSelect(orderData.id, responseId),
      );

      if (response.success) {
        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await refreshOrderData();
        setActiveTab('details');
        notifySuccess(t('Success'), t('Performer selected successfully'));
        return {success: true};
      } else {
        throw new Error(response.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
      notifyError(
        t('Error'),
        error.message ||
          t('Failed to select performer. Please try again later.'),
      );
      return {success: false};
    }
  };

  const rejectResponse = async responseId => {
    try {
      // ‚úÖ –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (POST /orders/{id}/responses/{responseId}/reject) - —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫
      const response = await retryApiCall(() =>
        api.orders.responsesReject(orderData.id, responseId),
      );

      if (response.success) {
        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await refreshOrderData();
        notifySuccess(t('Success'), t('Response rejected successfully'));
        return {success: true};
      } else {
        throw new Error(response.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∫–ª–∏–∫');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞:', error);
      notifyError(
        t('Error'),
        error.message ||
          t('Failed to reject response. Please try again later.'),
      );
      return {success: false};
    }
  };

  const changePerformer = async () => {
    try {
      // ‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ –ø–µ—Ä–µ–¥—É–º–∞–ª –∏ —Ä–µ—à–∏–ª –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è - –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –µ–≥–æ –æ—Ç–∫–ª–∏–∫
      // –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ responseId –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      const executorId =
        orderData.executor_id || orderData.selectedPerformer?.id;
      if (!executorId) {
        throw new Error('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
      }

      // –ò—â–µ–º –æ—Ç–∫–ª–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      const selectedResponse = orderData.responses?.find(
        response =>
          response.executor?.id === executorId ||
          response.user_id === executorId,
      );

      if (!selectedResponse) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–∫–ª–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
      }

      // ‚úÖ –û—Ç–∫–ª–æ–Ω—è–µ–º –æ—Ç–∫–ª–∏–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (POST /orders/{id}/responses/{responseId}/reject) - —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫
      const response = await retryApiCall(() =>
        api.orders.responsesReject(orderData.id, selectedResponse.id),
      );

      if (response.success) {
        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await refreshOrderData();
        notifySuccess(
          t('Success'),
          t('Performer selection cancelled successfully'),
        );
        return {success: true};
      } else {
        throw new Error(response.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
      notifyError(
        t('Error'),
        error.message ||
          t('Failed to change performer. Please try again later.'),
      );
      return {success: false};
    }
  };

  const rejectPerformer = async () => {
    try {
      console.log('üîÑ Starting rejectPerformer process...');
      console.log('üìã Current order data:', {
        id: orderData.id,
        status: orderData.status,
        executor_id: orderData.executor_id,
        selectedPerformer: orderData.selectedPerformer?.id,
      });

      // ‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è - –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –µ–≥–æ –æ—Ç–∫–ª–∏–∫
      const executorId =
        orderData.executor_id || orderData.selectedPerformer?.id;
      if (!executorId) {
        throw new Error('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
      }

      console.log('üë§ Executor ID to reject:', executorId);

      // –ò—â–µ–º –æ—Ç–∫–ª–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      const selectedResponse = orderData.responses?.find(
        response =>
          response.executor?.id === executorId ||
          response.user_id === executorId,
      );

      if (!selectedResponse) {
        console.log('‚ùå Available responses:', orderData.responses);
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–∫–ª–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
      }

      console.log('üìù Selected response to reject:', {
        id: selectedResponse.id,
        executor_id: selectedResponse.executor?.id || selectedResponse.user_id,
        status: selectedResponse.status,
      });

      // ‚úÖ –û—Ç–∫–ª–æ–Ω—è–µ–º –æ—Ç–∫–ª–∏–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (POST /orders/{id}/responses/{responseId}/reject) - —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫
      console.log('üåê Making API call to reject response...');
      const response = await retryApiCall(() =>
        api.orders.responsesReject(orderData.id, selectedResponse.id),
      );

      console.log('üì° API response:', response);

      if (response.success) {
        console.log('‚úÖ API call successful, refreshing order data...');
        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await refreshOrderData();
        console.log('üîÑ Order data refreshed after reject');
        notifySuccess(t('Success'), t('Performer rejected successfully'));
        return {success: true};
      } else {
        throw new Error(response.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
      notifyError(
        t('Error'),
        error.message ||
          t('Failed to reject performer. Please try again later.'),
      );
      return {success: false};
    }
  };

  const acceptOrder = async () => {
    try {
      // ‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É (POST /orders/{id}/accept)
      const response = await retryApiCall(() =>
        api.orders.ordersAccept(orderData.id),
      );

      if (response.success) {
        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await refreshOrderData();
        setReviewModalVisible(true); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –æ—Ç–∑—ã–≤–∞
        notifySuccess(t('Success'), t('Order completed successfully'));
        return {success: true};
      } else {
        throw new Error(response.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      notifyError(
        t('Error'),
        error.message || t('Failed to complete order. Please try again later.'),
      );
      return {success: false};
    }
  };

  const archiveOrderByCustomer = async () => {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      showConfirm({
        title: t('Archive Order'),
        message: t(
          'Are you sure you want to move this order to archive? The order will be marked as completed.',
        ),
        onConfirm: async () => {
          try {
            const response = await retryApiCall(() =>
              api.orders.ordersArchiveByCustomer(orderData.id),
            );

            if (response.success) {
              await refreshOrderData();
              notifySuccess(t('Success'), t('Order moved to archive'));
            } else {
              throw new Error(response.message || 'Failed to archive order');
            }
          } catch (error) {
            notifyError(
              t('Error'),
              error.message || t('Failed to archive order'),
            );
          }
        },
        onCancel: () => {},
        confirmText: t('Archive'),
        cancelText: t('Cancel'),
      });
    } catch (error) {
      console.error('Error archiving order:', error);
    }
  };

  const completeOrderByCustomer = async () => {
    try {
      // ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º –±–µ–∑ —ç—Ç–∞–ø–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (POST /orders/{id}/complete-by-customer)
      const response = await retryApiCall(() =>
        api.orders.ordersCompleteByCustomer(orderData.id),
      );

      if (response.success) {
        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        await refreshOrderData();
        setExecutorReviewModalVisible(true); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –æ—Ç–∑—ã–≤–∞ –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
        notifySuccess(t('Success'), t('Order completed successfully'));
        return {success: true};
      } else {
        throw new Error(response.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º:', error);
      notifyError(
        t('Error'),
        error.message || t('Failed to complete order. Please try again later.'),
      );
      return {success: false};
    }
  };

  const rejectOrder = async () => {
    try {
      // ‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É (POST /orders/{id}/reject)
      const response = await retryApiCall(() =>
        api.orders.ordersReject(orderData.id),
      );

      if (response.success) {
        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await refreshOrderData();
        notifySuccess(
          t('Success'),
          t('Order rejected, searching for new performer'),
        );
        return {success: true};
      } else {
        throw new Error(response.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      notifyError(
        t('Error'),
        error.message || t('Failed to reject order. Please try again later.'),
      );
      return {success: false};
    }
  };

  // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)
  const returnToSearch = async () => {
    try {
      // Send only the fields we want to update
      const updatedOrderData = {
        id: orderData.id,
        title: orderData.title,
        work_direction: orderData.work_direction,
        work_type: orderData.work_type,
        description: orderData.description || '',
        city: orderData.city,
        address: orderData.address,
        max_amount: orderData.max_amount,
        date_type: orderData.date_type || 'single',
        status: 0, // –°—Ç–∞—Ç—É—Å "Searching for performer"
        executor_id: null, // –£–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      };

      const response = await retryApiCall(() =>
        api.orders.ordersEdit(orderData.id, updatedOrderData),
      );

      if (response.success) {
        await refreshOrderData();
        notifySuccess(t('Success'), t('Returned to search for performers'));
        return {success: true};
      } else {
        throw new Error(response.message || 'Failed to return to search');
      }
    } catch (error) {
      console.error('Error returning to search:', error);
      notifyError(
        t('Error'),
        error.message ||
          t('Failed to return to search. Please try again later.'),
      );
      return {success: false};
    }
  };

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ
  const completeOrderSuccess = async () => {
    try {
      // ‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–∫–∞–∑ (POST /orders/{id}/complete-by-customer)
      const response = await retryApiCall(() =>
        api.orders.ordersCompleteByCustomer(orderData.id),
      );

      if (response.success) {
        await refreshOrderData();
        setReviewModalVisible(true); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –æ—Ç–∑—ã–≤–∞
        notifySuccess(t('Success'), t('Order completed successfully'));
        return {success: true};
      } else {
        throw new Error(response.message || 'Failed to complete order');
      }
    } catch (error) {
      console.error('Error completing order:', error);
      notifyError(
        t('Error'),
        error.message || t('Failed to complete order. Please try again later.'),
      );
      return {success: false};
    }
  };

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
  const completeOrderWithIssues = async () => {
    try {
      // ‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —Ä–∞–±–æ—Ç—É (POST /orders/{id}/reject)
      const response = await retryApiCall(() =>
        api.orders.ordersReject(orderData.id),
      );

      if (response.success) {
        await refreshOrderData();
        notifySuccess(
          t('Success'),
          t('Order returned to executor for improvements'),
        );
        return {success: true};
      } else {
        throw new Error(
          response.message || 'Failed to return order for improvements',
        );
      }
    } catch (error) {
      console.error('Error returning order for improvements:', error);
      notifyError(
        t('Error'),
        error.message ||
          t('Failed to return order for improvements. Please try again later.'),
      );
      return {success: false};
    }
  };

  const submitReview = async () => {
    try {
      // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É
      if (!rating || rating < 1 || rating > 5) {
        notifyError(
          t('Error'),
          t('Please rate the performer from 1 to 5 stars'),
        );
        return {success: false};
      }

      // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
      const executorId =
        orderData.executor_id || orderData.selectedPerformer?.id;
      if (!executorId) {
        throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ –¥–ª—è –æ—Ç–∑—ã–≤–∞');
      }

      const reviewData = {
        order_id: orderData.id,
        rating: rating,
        text: reviewText || '', // –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
      };

      const response = await retryApiCall(() =>
        api.executors.reviewsCreate(executorId, reviewData),
      );

      if (response.success) {
        closeReviewModal();
        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
        await refreshOrderData();
        notifySuccess(t('Success'), t('Review sent successfully!'));
        return {success: true};
      } else {
        throw new Error(response.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞:', error);
      notifyError(
        t('Error'),
        error.message || t('Failed to send review. Please try again later.'),
      );
      return {success: false};
    }
  };

  const closeReviewModal = () => {
    setReviewModalVisible(false);
    setRating(0);
    setReviewText('');
  };

  const submitExecutorReview = async reviewData => {
    try {
      const response = await retryApiCall(() =>
        api.executorReviews.create(reviewData),
      );

      if (response.success) {
        setExecutorReviewModalVisible(false);
        notifySuccess(t('Success'), t('Review submitted successfully'));
        return {success: true};
      } else {
        throw new Error(response.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ:', error);
      notifyError(t('Error'), error.message || t('Failed to submit review'));
      return {success: false};
    }
  };

  const closeExecutorReviewModal = () => {
    setExecutorReviewModalVisible(false);
  };

  const showMenu = () => {
    setMenuVisible(true);
    Animated.timing(menuAnimation, {
      toValue: 1,
      duration: 200,
      useNativeDriver: true,
    }).start();
  };

  const hideMenu = () => {
    Animated.timing(menuAnimation, {
      toValue: 0,
      duration: 150,
      useNativeDriver: true,
    }).start(() => setMenuVisible(false));
  };

  const cancelOrder = async () => {
    try {
      showConfirm({
        title: t('Cancel order'),
        message: t('Are you sure you want to cancel this order?'),
        cancelText: t('No'),
        confirmText: t('Yes'),
        onConfirm: async () => {
          try {
            const response = await retryApiCall(() =>
              api.orders.ordersCancel(orderData.id),
            );

            if (response.success) {
              notifySuccess(t('Success'), t('Order cancelled successfully'));
              navigation.goBack();
              return {success: true};
            } else {
              throw new Error(response.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑');
            }
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞:', error);
            notifyError(
              t('Error'),
              error.message ||
                t('Failed to cancel order. Please try again later.'),
            );
            return {success: false};
          }
        },
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞:', error);
      notifyError(t('Error'), t('An error occurred while cancelling order'));
      return {success: false};
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (orderId) {
      loadOrder();
    }
  }, [orderId, navigation]);

  // ‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ–∫—É—Å–∞ —ç–∫—Ä–∞–Ω–æ–º
  useFocusEffect(
    React.useCallback(() => {
      if (orderId) {
        console.log(
          '–≠–∫—Ä–∞–Ω Order –ø–æ–ª—É—á–∏–ª —Ñ–æ–∫—É—Å - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:',
          orderId,
        );
        loadOrder();
      }
    }, [orderId]),
  );

  // –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  const getFileTypeFromUrl = url => {
    const extension = url.split('.').pop().toLowerCase().split('?')[0];
    const mimeTypes = {
      jpg: 'image/jpeg',
      jpeg: 'image/jpeg',
      png: 'image/png',
      gif: 'image/gif',
      webp: 'image/webp',
      bmp: 'image/bmp',
      svg: 'image/svg+xml',
    };
    return {
      mimeType: mimeTypes[extension] || 'image/jpeg',
      ext: mimeTypes[extension] ? extension : 'jpg',
    };
  };

  const requestStoragePermission = async () => {
    if (Platform.OS !== 'android') return true;
    try {
      if (Platform.Version >= 33) {
        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGES,
          {
            title: t('Storage Permission'),
            message: t('App needs access to save images'),
            buttonNeutral: t('Ask Me Later'),
            buttonNegative: t('Cancel'),
            buttonPositive: t('OK'),
          },
        );
        return granted === PermissionsAndroid.RESULTS.GRANTED;
      } else {
        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
          {
            title: t('Storage Permission'),
            message: t('App needs access to save images'),
            buttonNeutral: t('Ask Me Later'),
            buttonNegative: t('Cancel'),
            buttonPositive: t('OK'),
          },
        );
        return granted === PermissionsAndroid.RESULTS.GRANTED;
      }
    } catch (err) {
      console.warn('Permission request error:', err);
      return false;
    }
  };

  const viewFile = async (fileUri, fileName, mimeType) => {
    try {
      if (fileUri.startsWith('file://') || !fileUri.startsWith('http')) {
        await FileViewer.open(fileUri, {
          displayName: fileName,
          showOpenWithDialog: Platform.OS === 'android',
          showAppsSuggestions: Platform.OS === 'android',
        });
        return;
      }

      const tempDir = RNFS.TemporaryDirectoryPath;
      const fileExtension = getFileTypeFromUrl(fileUri).ext;
      const timestamp = new Date().getTime();
      const tempFileName = `temp_${timestamp}.${fileExtension}`;
      const tempFilePath = `${tempDir}/${tempFileName}`;

      const downloadResult = await RNFS.downloadFile({
        fromUrl: fileUri,
        toFile: tempFilePath,
      }).promise;

      if (downloadResult.statusCode === 200) {
        await FileViewer.open(tempFilePath, {
          displayName: fileName || `file.${fileExtension}`,
          showOpenWithDialog: Platform.OS === 'android',
          showAppsSuggestions: Platform.OS === 'android',
          onDismiss: async () => {
            try {
              await RNFS.unlink(tempFilePath);
            } catch (error) {
              console.log('Error deleting temporary file:', error);
            }
          },
        });
      }
    } catch (error) {
      console.error('File viewing error:', error);
      Alert.alert(t('Cannot Open File'), t('Failed to open file'));
    }
  };

  const downloadFile = async (fileUrl, fileName) => {
    try {
      if (Platform.OS === 'ios') {
        showConfirm({
          title: t('Save Image'),
          message: t('Where would you like to save the image?'),
          cancelText: t('Files App'),
          confirmText: t('Photo Library'),
          onConfirm: () => saveToPhotoLibrary(fileUrl, fileName),
          onCancel: () => saveToDocuments(fileUrl, fileName),
        });
      } else {
        await saveToDocuments(fileUrl, fileName);
      }
    } catch (error) {
      notifyError(
        t('Download Failed'),
        error.message || t('Failed to download file. Please try again.'),
      );
    }
  };

  const saveToPhotoLibrary = async (fileUrl, fileName) => {
    try {
      // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è iOS
      if (Platform.OS === 'ios') {
        // –î–ª—è iOS –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, CameraRoll.save —Å–∞–º –∑–∞–ø—Ä–æ—Å–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        // –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
      }

      const timestamp = new Date().getTime();
      const fileExtension = getFileTypeFromUrl(fileUrl).ext;
      const tempPath = `${RNFS.TemporaryDirectoryPath}/${timestamp}_${fileName}`;

      const downloadResult = await RNFS.downloadFile({
        fromUrl: fileUrl,
        toFile: tempPath,
      }).promise;

      if (downloadResult.statusCode === 200) {
        await CameraRoll.save(tempPath, {type: 'photo'});
        await RNFS.unlink(tempPath);
        notifySuccess(t('Success'), t('Image saved to Photo Library'));
      }
    } catch (error) {
      console.error('Save to photo library error:', error);
      notifyError(
        t('Save Failed'),
        error.message || t('Failed to save image to gallery'),
      );
    }
  };

  const saveToDocuments = async (fileUrl, fileName) => {
    try {
      if (Platform.OS === 'android') {
        const hasPermission = await requestStoragePermission();
        if (!hasPermission) {
          notifyError(
            t('Permission Required'),
            t('Storage permission is required to download files'),
          );
          return;
        }
      }

      const downloadDir =
        Platform.OS === 'ios'
          ? RNFS.DocumentDirectoryPath
          : RNFS.DownloadDirectoryPath;
      const timestamp = new Date().getTime();
      const fileExtension = getFileTypeFromUrl(fileUrl).ext;
      const baseFileName = fileName.replace(/\.[^/.]+$/, '');
      const finalFileName = `${baseFileName}_${timestamp}.${fileExtension}`;
      const filePath = `${downloadDir}/${finalFileName}`;

      const downloadResult = await RNFS.downloadFile({
        fromUrl: fileUrl,
        toFile: filePath,
      }).promise;

      if (downloadResult.statusCode === 200) {
        notifySuccess(
          t('Download Complete'),
          Platform.OS === 'ios'
            ? t('File saved to Files app (Documents)')
            : t('File saved to Downloads folder'),
        );
      }
    } catch (error) {
      notifyError(t('Save Failed'), error.message || t('Failed to save file'));
    }
  };

  const checkCanReviewExecutor = async () => {
    try {
      if (!orderData?.id || !orderData?.executor_id) return;

      const response = await retryApiCall(() =>
        api.executorReviews.canReview(orderData.id),
      );

      if (response.success && response.result) {
        setCanReviewExecutor(response.result.can_review);
      }
    } catch (error) {
      console.error(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ:',
        error,
      );
      setCanReviewExecutor(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
  useEffect(() => {
    if (orderData && (orderData.status === 5 || orderData.status === 7)) {
      checkCanReviewExecutor();
    }
  }, [orderData?.status, orderData?.id, orderData?.executor_id]);

  return {
    orderData,
    activeTab,
    setActiveTab,
    loading,
    menuVisible,
    menuAnimation,
    reviewModalVisible,
    rating,
    setRating,
    reviewText,
    setReviewText,
    orderStatuses,
    getStatusColor,
    sendContacts,
    choosePerformer,
    rejectResponse,
    changePerformer,
    rejectPerformer,
    acceptOrder,
    rejectOrder,
    archiveOrderByCustomer,
    returnToSearch,
    completeOrderSuccess,
    completeOrderWithIssues,
    cancelOrder,
    completeOrderByCustomer,
    submitReview,
    closeReviewModal,
    executorReviewModalVisible,
    submitExecutorReview,
    closeExecutorReviewModal,
    showMenu,
    hideMenu,
    executorDetails,
    fetchExecutorDetails,
    enrichExecutorData,
    refreshOrderData,
    viewFile,
    downloadFile,
    canReviewExecutor,
  };
};

export default useOrder;
